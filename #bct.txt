#3

 
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;

 contract MyContract{
      address private owner ;

     constructor()  payable {
     owner=msg.sender;
        }

      function withdraw()  payable public {
        require(address(this).balance > 0 ,"balance should br grater than 0");
        payable(msg.sender).transfer(address(this).balance);
        
      }


      function deposit() public payable{
        require(msg.value > 0 ,"Deposited account should be grater that 0");
        
      }
      function ShowBalance() public view returns(uint){
        return address(this).balance;
      }
 }


#4

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.7;

contract MarksManagmtSys {
    struct Student {
        uint ID;
        string fName;
        string lName;
        uint marks;
    }

    address public immutable owner;
    Student[] public students; // Array to store students

    // Modifier to restrict access to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    // Constructor to initialize the owner (now payable)
    constructor() payable {
        owner = msg.sender;
    }

    // Function to add a new student to the array
    function addNewRecords(uint _ID, string memory _fName, string memory _lName, uint _marks) public onlyOwner {
        students.push(Student(_ID, _fName, _lName, _marks));
    }

    // Function to add bonus marks to the last student in the array
    function bonusMarks(uint _bonus) public onlyOwner {
        require(students.length > 0, "No students in the system");
        students[students.length - 1].marks += _bonus; // Add bonus to the last student
    }

    // Function to get the total number of students
    function getStudentCount() public view returns (uint) {
        return students.length;
    }

    // Function to get details of a student by index
    function getStudentByIndex(uint index) public view returns (uint, string memory, string memory, uint) {
        require(index < students.length, "Index out of bounds");
        Student storage student = students[index];
        return (student.ID, student.fName, student.lName, student.marks);
    }
}
